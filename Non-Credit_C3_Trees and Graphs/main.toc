\contentsline {paragraph}{This is my course note on “Trees And Graphs: The Basics” provided by Colorado University of Boulder. This is a non-credit prep course for an MS-CS degree.}{1}{}%
\contentsline {section}{\numberline {1}Binary Search Trees}{3}{}%
\contentsline {paragraph}{ Binary search tree is a binary tree is a kind of data type with set of data elements without repeatition.\\ We can insert, delete, search, and traverse the data elements in a binary search tree.\\ For each element in it, there will be a key of the element, which will always be a number.\\ With this setting in place, we can always comparing different elements by comparing their keys, even if the elements are not numbers.\\ }{3}{}%
\contentsline {paragraph}{ In the figure, we have a binary search tree with some nodes and leaves. Every node has two children nodes and those leaves, which have no children nodes, are called nil nodes.\\ Every node has an element with a key, and the key of the left child node is always $<$ the key of the parent node, and the key of the right child node is always $>$ the key of the parent node.\\ The left and right child nodes are also binary search trees.\\ That is to say, the keys are always in a sorted order regardless of the structure of the tree. When we move the elements around, the keys will be different for each elements, in order to remain in the sorted order.\\ The leaves have no elements.\\ }{4}{}%
\contentsline {paragraph}{ When there is a node with the key 25, every node in the left subtree will have a key $<$ 25, and every node in the right subtree will have a key $>$ 25.\\ The rule will also apply to all those subtrees.\\ }{4}{}%
